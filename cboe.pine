//@version=4

//MIT License

//Copyright (c) 2019 user-Noldo

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.


study(title="CBOE PCR Factor Dependent Variable Odd Generator ", shorttitle="CBOE PCR Market ID")
src = close


Pcr = security ("USI:PCC", "W", src)

Par = (Pcr / (1 + Pcr)) * 100

Car = (100 - Par)

_pcr_bull_gross = Car 
_pcr_bear_gross = Par

_pcr_stagnant      =  ((_pcr_bull_gross * _pcr_bear_gross ) / 100 ) 
_pcr_bull          =  (_pcr_bull_gross  - _pcr_stagnant) 
_pcr_bear          =  (_pcr_bear_gross  - _pcr_stagnant) 

// Conditions 

_coeff_pcr = (_pcr_bull + _pcr_bear + _pcr_stagnant) / 100 

_odd_pcr_bull     = (_pcr_bull)     / _coeff_pcr 
_odd_pcr_bear     = (_pcr_bear)     / _coeff_pcr
_odd_pcr_stagnant = (_pcr_stagnant) / _coeff_pcr


_pcr_bull_factor = 1 + ( _odd_pcr_bull     / 100 )
_pcr_bear_factor = 1 + ( _odd_pcr_bear     / 100 )
_pcr_stag_factor = 1 + ( _odd_pcr_stagnant / 100 )


// MONEY FLOW INDEX (MFI)

// Money Flow Index Period

t_mfi   = input(5 , title = "Period" , minval = 5)


// Essential Functions 

f_sum(_src , _length) => 

    _output  = 0.00 
    
    _length_adjusted = _length < 1 ? 1 : _length
    
    for i = 0 to _length_adjusted-1
        _output := _output + _src[i]


// MONEY FLOW INDEX =====> FOR BULL OR BEAR MARKET (CLOSE)


upper_s = f_sum(volume * (change(src) <= 0 ? 0 : src), t_mfi)
lower_s = f_sum(volume * (change(src) >= 0 ? 0 : src), t_mfi)

_market_index = rsi(upper_s, lower_s)


// Price Odds

// Conditions  

_bull_gross  = (_market_index )
_bear_gross  = (100 - _market_index )

_price_stagnant = ((_bull_gross * _bear_gross ) / 100)
_price_bull     =  (_bull_gross - _price_stagnant) 
_price_bear     =  (_bear_gross - _price_stagnant) 


_coeff_price = (_price_stagnant + _price_bull + _price_bear) / 100 


_bull     = _price_bull / _coeff_price 
_bear     = _price_bear / _coeff_price 
_stagnant = _price_stagnant / _coeff_price



// Market Types with PCR Factor

_temp_stagnant =  _stagnant * _pcr_stag_factor          // Pure Stagnant

_temp_bull     =  _bull     * _pcr_bull_factor          // Pure Bull

_temp_bear     =  _bear     * _pcr_bear_factor          // Pure Bear


// Now we ll do venn scheme (Probability Cluster)
// Pure Bull + Pure Bear + Pure Stagnant = 100 
// Markets will get their share in the Probability Cluster 

 
_coeff = (_temp_stagnant + _temp_bull + _temp_bear) / 100

_odd_bull     = _temp_bull / _coeff
_odd_bear     = _temp_bear / _coeff
_odd_stagnant = _temp_stagnant / _coeff


// Plot data

plot(_odd_bull     ,style = plot.style_histogram,linewidth = 5 , color=color.green   , transp = 10)
plot(_odd_bear     ,style = plot.style_histogram,linewidth = 5 , color=color.red     , transp = 20)
plot(_odd_stagnant ,style = plot.style_histogram,linewidth = 5 , color=color.yellow  , transp = 30)

