function func(param) do
    
end

foreach (i in iterable) {
    
}

while (function 
       
    (param) {
    
}) {
    
}

//parameters
trade comission
recalculate after, strategy properties
when to trade: pinescript referance
etc.
INPUT calc RANGE 
how many daily
account
close position cond
cond 1 -7 take position
cond 1 -7 take profit
timeframe to check all cond d/w
how long trend, long etc.
each alert two 8 hours
session alert
session condition
timestamp
time for conditions, per level. first 3 hours at least,  layer 7 , only 30 minutes
session: https://quantnomad.com/2021/01/31/the-easiest-way-to-add-a-session-to-pinescript-strategies/

session = input("0900-1700:1234567")
t = time(timeframe.period, session)

*** "histort ref oper", so aler cond, omly afer time + better than 2-3 days

** also can use:


"rising"
Test if the x series is now rising for y bars long.
rising(source, length) → series[bool]
Returns
true if current x is greater than any previous x for y bars back, false otherwise.
Arguments
source (series[float]) Series of values to process.
length (series[integer]) Number of bars (length).

////////


******* check for h/d/w/ before trade

//var (not reseted oin evedry calc)
//oschilators
//long, short cond
//arrays (alrt cond etc.)
//inputs
epd
fut
volutility
comodety: wti
ery
xle, etf
esg? 
(etf "frak", "crbn", corell)
air oil?
djcien (corell, roc tech)
//securities
//data producers
options
short
fut
volutility
etc.
cl1, etha
// corellat to comodetym fut etc (ohlc): https://www.youtube.com/watch?v=kbW7XO-2LnY
//scripts
//alerts
cl1!
technicals of cl1!
//alert cons 1 -7 long
Abucket1 ← ∈ alert1, alert2, alert3
//function erx, erx (partam, var, long, short cond) , loop on param: how long trend
//while / if, for loop to function per alert cons
//function trade (long, short ← security a, b)
only alerts, oschilators, alert erx, ery
///////////////////////////////////////////////////////////////
// fut: 
If your script should only check closed bars, then include the barstate.isconfirmed variable in your bar comparisons.
That variable returns true if the bar is closed (TradingView, n.d.).
Should the bar still receive real-time price updates, then barstate.isconfirmed returns false.
That way we know if we compare real-time prices or closing prices.

So to check if the current real-time bar closed higher, we do:

closeHigher = barstate.isconfirmed and (close > close[1])

To see if the chart's most recent price bar closed lower we do:

closeLower = barstate.isconfirmed and (close < close[1])

And this code looks if the chart's last bar closed unchanged:

closeUnchanged = barstate.isconfirmed and (close == close[1])

In the same way we can use the barstate.isconfirmed variable with the other bar patterns we coded earlier in this article.

//https://kodify.net/tradingview/bar-data/close-higher-lower/
